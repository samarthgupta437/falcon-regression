#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

package com.inmobi.qa.airavatqa.prism;

import java.lang.reflect.Method;
import java.util.ArrayList;

import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.inmobi.qa.airavatqa.core.Bundle;
import com.inmobi.qa.airavatqa.core.ColoHelper;
import com.inmobi.qa.airavatqa.core.PrismHelper;
import com.inmobi.qa.airavatqa.core.ServiceResponse;
import com.inmobi.qa.airavatqa.core.Util;
import com.inmobi.qa.airavatqa.core.Util.URLS;
import com.inmobi.qa.airavatqa.core.instanceUtil;
import com.inmobi.qa.airavatqa.core.xmlUtil;
import com.inmobi.qa.airavatqa.generated.feed.ActionType;
import com.inmobi.qa.airavatqa.generated.feed.ClusterType;
import com.inmobi.qa.airavatqa.generated.feed.TimezoneType;

public class PrismFeedLateReplicationTest {

	
	@BeforeMethod(alwaysRun=true)
	public void testName(Method method) throws Exception
	{
		Util.print("test name: "+method.getName());
		//restart server as precaution
		Util.restartService(ua1.getClusterHelper());
		Util.restartService(ua2.getClusterHelper());
		Util.restartService(ua3.getClusterHelper());


	}

	public PrismFeedLateReplicationTest() throws Exception{

	}

	PrismHelper prismHelper=new PrismHelper("prism.properties");

	ColoHelper ua1=new ColoHelper("mk-qa.config.properties");

	ColoHelper ua2 = new ColoHelper("ivoryqa-1.config.properties");

	ColoHelper ua3 = new ColoHelper("gs1001.config.properties");

	@SuppressWarnings("deprecation")
	@Test
	public void multipleSourceOneTarget() throws Exception
	{

		Bundle b1 = (Bundle)Util.readELBundles()[0][0];
		b1.generateUniqueBundle();
		Bundle b2 = (Bundle)Util.readELBundles()[0][0];
		b2.generateUniqueBundle();
		Bundle b3 = (Bundle)Util.readELBundles()[0][0];
		b3.generateUniqueBundle();

		try{
			b1 = new Bundle(b1,ua1.getEnvFileName());
			b2  = new Bundle(b2,ua2.getEnvFileName());
			b3  = new Bundle(b3,ua3.getEnvFileName());


			b1.setInputFeedDataPath("/samarthRetention/input-data/rawLogs/oozieExample/${YEAR}/${MONTH}/${DAY}/${HOUR}/${MINUTE}/");

			b1.setCLusterColo("ua1");
			Util.print("cluster b1: "+b1.getClusters().get(0));

			ServiceResponse r = prismHelper.getClusterHelper().submitEntity(URLS.SUBMIT_URL,b1.getClusters().get(0));
			Assert.assertTrue(r.getMessage().contains("SUCCEEDED"));


			b2.setCLusterColo("ua2");
			Util.print("cluster b2: "+b2.getClusters().get(0));
			r = prismHelper.getClusterHelper().submitEntity(URLS.SUBMIT_URL,b2.getClusters().get(0));
			Assert.assertTrue(r.getMessage().contains("SUCCEEDED"));


			b3.setCLusterColo("ua3");
			Util.print("cluster b3: "+b3.getClusters().get(0));
			r = prismHelper.getClusterHelper().submitEntity(URLS.SUBMIT_URL,b3.getClusters().get(0));
			Assert.assertTrue(r.getMessage().contains("SUCCEEDED"));


			String feed = b1.getDataSets().get(0);
			feed =  instanceUtil.setFeedCluster(feed,xmlUtil.createValidity("2009-02-01T00:00Z","2012-01-01T00:00Z",TimezoneType.UTC),xmlUtil.createRtention("hours(10)",ActionType.DELETE),null,ClusterType.SOURCE,null);

			String postFix = "/US/ua2" ;
			String prefix = b1.getFeedDataPathPrefix();
			Util.HDFSCleanup(ua2,prefix.substring(1));
			Util.lateDataReplenish(ua2,90,0,1,prefix,postFix);


			postFix = "/UK/ua3" ;
			prefix = b1.getFeedDataPathPrefix();
			Util.HDFSCleanup(ua3,prefix.substring(1));
			Util.lateDataReplenish(ua3,90,0,1,prefix,postFix);

			String startTime = instanceUtil.getTimeWrtSystemTime(-30);

			feed = instanceUtil.setFeedCluster(feed,xmlUtil.createValidity(startTime,"2099-01-01T00:00Z",TimezoneType.UTC),xmlUtil.createRtention("hours(10)",ActionType.DELETE),Util.readClusterName(b2.getClusters().get(0)),ClusterType.SOURCE,"US/${cluster.colo}");
			feed = instanceUtil.setFeedCluster(feed,xmlUtil.createValidity(startTime,"2099-01-01T00:00Z",TimezoneType.UTC),xmlUtil.createRtention("hours(10)",ActionType.DELETE),Util.readClusterName(b1.getClusters().get(0)),ClusterType.TARGET,null);
			feed = instanceUtil.setFeedCluster(feed,xmlUtil.createValidity(startTime,"2099-01-01T00:00Z",TimezoneType.UTC),xmlUtil.createRtention("hours(10)",ActionType.DELETE),Util.readClusterName(b3.getClusters().get(0)),ClusterType.SOURCE,"UK/${cluster.colo}");


			Util.print("feed: "+feed);

			r= prismHelper.getFeedHelper().submitAndSchedule(URLS.SUBMIT_AND_SCHEDULE_URL, feed);
			Thread.sleep(10000);

			String TargetBundleID = 	instanceUtil.getLatestBundleID(Util.readDatasetName(feed),"FEED",ua1.getFeedHelper());
			
			//wait till 1st instance of replication coord is SUCCEEDED
			ArrayList<String> replicationCoordIDTarget    = instanceUtil.getReplicationCoordID(TargetBundleID,ua1.getFeedHelper());
			
			for(int i = 0 ; i < 30 ; i++)
			{
				if(instanceUtil.getInstanceStatusFromCoord(ua1,replicationCoordIDTarget.get(0),0).toString().equals("SUCCEEDED") && instanceUtil.getInstanceStatusFromCoord(ua1,replicationCoordIDTarget.get(1),0).toString().equals("SUCCEEDED"))
					break;
					Thread.sleep(20000);
			}
			
			Thread.sleep(15000);

			ArrayList<String>  inputFolderListForColo1=	instanceUtil.getInputFoldersForInstanceForReplication(ua1,replicationCoordIDTarget.get(0),0);
			ArrayList<String>  inputFolderListForColo2=	instanceUtil.getInputFoldersForInstanceForReplication(ua1,replicationCoordIDTarget.get(1),0);
			
			instanceUtil.putDataInFolders(ua2, inputFolderListForColo1);
			instanceUtil.putDataInFolders(ua3, inputFolderListForColo2);


		
			Util.print("folder list 1: "+inputFolderListForColo1.toString());
			Util.print("folder list 2: "+inputFolderListForColo2.toString());




		}

		finally{
				prismHelper.getProcessHelper().delete(URLS.DELETE_URL,b1.getProcessData());
				prismHelper.getFeedHelper().delete(URLS.DELETE_URL, b1.getDataSets().get(0));
				prismHelper.getFeedHelper().delete(URLS.DELETE_URL, b1.getDataSets().get(1));
				prismHelper.getClusterHelper().delete(URLS.DELETE_URL,b1.getClusters().get(0));

		}
	}


	
	
}
